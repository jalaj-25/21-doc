//JALAJ SINGHAL
//12.07.2023
#include<stdio.h>
int main() {
    int rows, columns, i, j, sum =0;
    printf("Enter the number of rows: ");
    scanf("%d",&rows);
    printf("Enter the number of columns: ");
    scanf("%d", &columns);
    int** arr = (int**)(rows * sizeof(int*));
    for (i = 0; i < rows; i++) {
        arr[i] = (int*)(columns * sizeof(int));
    }
    printf("Enter the elements of the array: ");
    for (i = 0; i < rows; i++) {
        for (j = 0; j < columns; j++) {
            scanf("%d", &arr[i][j]);
            sum += arr[i][j];
        }
    }
    printf("The array elements are: ");
    for (i = 0; i < rows; i++) {
        for (j = 0; j < columns; j++) {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
    printf("The sum of all elements is: %d", sum);
    for (i = 0; i < rows; i++) {
        (arr[i]);
    }
    (arr);
    return 0;
}


//JALAJ SINGHAL
//15.07.2023
#include<stdio.h>
#include<stdlib.h>
void matrixmultiplication(int**matrix1, int rows1, int columns1,
int**matrix2, int rows2, int columns2, int**result) 
{
    int i, j, k;
    for(int i = 0; i < rows1; i++) 
    {
        for(j = 0; j < columns2; j++) 
        {
            result[i][j] = 0;
            for(k = 0; k < columns1; k++) 
            {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}
void printmatrix(int** matrix, int rows, int columns) 
{
    int i, j;
    for(i = 0; i < rows; i++) 
    {
        for(j = 0; j < columns; j++) 
        {
            printf("%d", matrix[i][j]);
        }
        printf("\n");
    }
}
int main() 
{
    int rows1, rows2, column1, column2;
    int i, j;
    printf("Enter the number of rows for matrix1: ");
    scanf("%d",&rows1);
    printf("Enter the number of column for matrix1: ");
    scanf("%d",&column1);
    printf("Enter the number of rows for matrix2: ");
    scanf("%d",&rows2);
    printf("Enter the number of column for matrix2: ");
    scanf("%d",&column2);
}
    if (columns1 != rows2) 
    {
        printf("Error \n");
        return 1;
    }
    int** matrix1 = (int**)(rows1 * sizeof(int*));
    for (i = 0; i < rows1; i++) 
    {
        matrix1[i] = (int*)(columns1 * sizeof(int));
    }
    printf("Enter the elements for matrix 1: ");
    for (i = 0; i < rows1; i++) 
    {
        for (j = 0; j < columns1; j++) 
        {
            scanf("%d", &matrix1[i][j]);
        }
    }
    int** matrix2 = (int**)(rows2 * sizeof(int*));
    for (i = 0; i < rows2; i++) 
    {
        matrix2[i] = (int*)(columns2 * sizeof(int));
    }
    printf("Enter the elements for matrix 2:\n");
    for (i = 0; i < rows2; i++) 
    {
        for (j = 0; j < columns2; j++) 
        {
            scanf("%d", &matrix2[i][j]);
        }
    }
    int** result = (int**)malloc(rows1 * sizeof(int*));
    for (i = 0; i < rows1; i++) 
    {
        result[i] = (int*)malloc(columns2 * sizeof(int));
    }
    matrixmultiplication(matrix1, rows1, columns1, matrix2, rows2, columns2, result);
    printf("The result of matrix multiplication is:\n");
    printmatrix(result, rows1, columns2);
    for (i = 0; i < rows1; i++) 
    {
        (matrix1[i]);
    }
    (matrix1);
    for (i = 0; i < rows2; i++) 
    {
        (matrix2[i]);
    }
    (matrix2);
    for (i = 0; i < rows1; i++) 
    {
        (result[i]);
    }
    (result);
    return 0;
}

PYTHON
#JALAJ SINGHAL
#15.07.2023
#UNION
set1 = {5, 6, 8, 10, 88}
set2 = {91, 45, 3, 5, 9}
union_set = set1.union(set2)
print("Union of se1 and set2 is: ", union_set)

#JALAJ SINGHAL
#15.07.2023
#SUBSET RELATIONSHIP
set1 = set(map(int, input("Enter the elements of first set(space seprated): ").split()))
set2 = set(map(int, input("Enter the elements of second set(space seprated): ").split()))
if set1.issubset(set2):
    print("First set is a subset of second set.")
elif set2.issubset(set1):
    print("Second set is a subset of first set.")
else:
    print("The tow sets have no subset relationship.")
